#include <vector>
#include <iostream>
#include <fstream>
#include <string>
#include <map>
#include "opencv2/opencv.hpp"
#include "aruco.h"
#include "cvdrawingutils.h"

using namespace cv;
using namespace std;


static void help()
{
    printf("\nPerform marker detection and pose estimation on a single or set of images and save results.\n"
           "Usage: detected_markers\n"
           "     input              # path to an image file or a xml-file containing list of images\n"
           "     output             # filename for the resulting csv-file containing the marker information\n"
           "     calibration file   # filename of the camera parameters file (opencv format)\n"
           "     marker ids         # list of the valid marker ids in squared brackets - e.g. [72,136,140]\n"
           "     marker size        # side length of the marker in meter (outer black square)\n"
           "     [omni]             # boolean flag {0,1} specifying wheter to use a perspective or omnidirection projection model\n"
           "     [debug]            # boolean flag {0,1} - step through images and visualize the marker pose. ESC to exit.\n"
           "\n");
}


static bool readStringList(const string &filename, vector<string>& image_file_names)
{
    image_file_names.resize(0);
    FileStorage fs(filename, FileStorage::READ);
    if(!fs.isOpened())
        return false;
    FileNode n = fs.getFirstTopLevelNode();
    if(n.type() != FileNode::SEQ)
        return false;
    FileNodeIterator it = n.begin(), it_end = n.end();
    for(; it != it_end; ++it)
        image_file_names.push_back((string)*it);
    return true;
}


int main(int argc, char **argv)
{
    if (argc < 3 || argc > 8) {
        help();
        return 0;
    }
    
    // parse command line parameters
    string input_file(argv[1]);
    vector<string> image_file_names;
    vector<unsigned int> marker_ids;
    bool omni = false;
    bool debug = true;
    
    if (argc >= 7 || argc == 8) {
        omni = *argv[6] == '1';
    }
    
    if (argc == 8) {
        debug = *argv[7] == '1';
    }
    
    // input file is a xml-file containing the images names
    if (input_file.find(".xml") != string::npos) {
        readStringList(input_file, image_file_names);
    } 
    // input file is a single image
    else {
        image_file_names.push_back(input_file);
    }
    
    aruco::CameraParameters camera_parameters;
    camera_parameters.readFromFile(string(argv[3]));
    
    // get marker ids
    char* pch = strtok(argv[4], " [,]");
    while (pch != NULL) {
        marker_ids.push_back(atoi(pch));
        pch = strtok(NULL, " [,]");
    }
    aruco::MarkerDetector marker_detector;
    marker_detector.setMarkerIds(marker_ids);
    
    double marker_size = atof(argv[5]);
    
    vector<aruco::Marker> markers;

    ofstream log;
    log.open(argv[2]);
    log << "image";
    for (size_t i = 0; i < marker_ids.size(); ++i) {
        unsigned int id = marker_ids[i];
        log << "," << id << "_x," << id << "_y," << id << "_z," << id << "_r1," << id << "_r2,";
        log << id << "_r3," << id << "_bb_x1," << id << "_bb_y1,"  << id << "_bb_x2," << id << "_bb_y2,";
        log << id << "_bb_x3," << id << "_bb_y3,"  << id << "_bb_x4," << id << "_bb_y4," << id << "_error";
    }
    log << endl;
    
    map<unsigned int, vector<double > > marker_info;
    for (size_t i = 0; i < marker_ids.size(); ++i) {
        marker_info[marker_ids[i]] = vector<double>(15, 0.);
    }
    
    Mat image;
    Mat image_color;
    
    // perform detection on every image from image list
    for (size_t i = 0; i < image_file_names.size(); ++i){
    
        total_count = image_file_names.size();
        barWidth = 80;
        
        cout << "processing image " << image_file_names[i] << endl;
        
        image = imread(image_file_names[i], 0);
        
        if (debug) {
            cvtColor(image, image_color, CV_GRAY2BGR);
        }
        
        if (image.empty()){
            cout << "error reading " << image_file_names[i] << endl;
            return 0;
        }
        
        marker_detector.detect(image, markers, camera_parameters, marker_size, omni);
        /* cout << "found markers: " << markers.size() << endl; */
        
        // extract information from detected markers
        for(unsigned int j = 0; j < markers.size(); j++) {
            if(markers[j].id > 0) {
                marker_info[markers[j].id][0] = markers[j].Tvec.at<float>(0);
                marker_info[markers[j].id][1] = markers[j].Tvec.at<float>(1);
                marker_info[markers[j].id][2] = markers[j].Tvec.at<float>(2);
                marker_info[markers[j].id][3] = markers[j].Rvec.at<float>(0);
                marker_info[markers[j].id][4] = markers[j].Rvec.at<float>(1);
                marker_info[markers[j].id][5] = markers[j].Rvec.at<float>(2);
                marker_info[markers[j].id][6] = markers[j][0].x;
                marker_info[markers[j].id][7] = markers[j][0].y;
                marker_info[markers[j].id][8] = markers[j][1].x;
                marker_info[markers[j].id][9] = markers[j][1].y;
                marker_info[markers[j].id][10] = markers[j][2].x;
                marker_info[markers[j].id][11] = markers[j][2].y;
                marker_info[markers[j].id][12] = markers[j][3].x;
                marker_info[markers[j].id][13] = markers[j][3].y;
                marker_info[markers[j].id][14] = markers[j].error;
                
                if (debug) {
                    markers[j].draw(image_color, Scalar(0, 0, 255), 1, true);
                    aruco::CvDrawingUtils::draw3dCube(image_color, markers[j], camera_parameters, omni);
                    aruco::CvDrawingUtils::draw3dAxis(image_color, markers[j], camera_parameters, omni);
                    cout << "marker id: " << markers[j].id << endl;
                    cout << "t: " << markers[j].Tvec << endl;
                    cout << "R: " << markers[j].Rvec << endl;
                    float x = markers[j].Tvec.at<float>(0);
                    float y = markers[j].Tvec.at<float>(1);
                    float z = markers[j].Tvec.at<float>(2);
                    cout << "distance: " << sqrtf(x * x + y * y + z * z) << endl << endl;
                }
            }
        }
        
        std::cout << "[";
        
        int pos = barWidth * i/total_count;
        
        for (int k = 0; k < barWidth; ++k) {
        if (k < pos) std::cout << "=";
        else if (k == pos) std::cout << ">";
        else std::cout << " ";
        }
        std::cout << "] " << int(progress * 100.0) << " %\r";
        std::cout.flush();
        
        
        /* log << image_file_names[i]; */
        /*
        for (size_t j = 0; j < marker_ids.size(); ++j) {
            // dump marker info to output file
            unsigned int id = marker_ids[j];
            log << "," << marker_info[id][0] << "," << marker_info[id][1] << "," << marker_info[id][2] << "," << marker_info[id][3];
            log << "," << marker_info[id][4] << "," << marker_info[id][5] << "," << marker_info[id][6] << "," << marker_info[id][7];
            log << "," << marker_info[id][8] << "," << marker_info[id][9] << "," << marker_info[id][10] << "," << marker_info[id][11];
            log << "," << marker_info[id][12] << "," << marker_info[id][13] << "," << marker_info[id][14];
            
            // reset marker info values
            fill(marker_info[id].begin(), marker_info[id].end(), 0);
        }
        */
        log << endl;
        
        if (debug) {
            imshow("image", image_color);
            if(waitKey(0) == 536870939)
                break;
        }
    }
    log.close();
}
